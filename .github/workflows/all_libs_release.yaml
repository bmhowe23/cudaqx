name: All libs (Release)

on:
  workflow_dispatch:
    inputs:
      release-number:
        description: 'Release Number (e.g. 0.3.0)'
        required: true
        default: '0.0.0'
      assets_repo:
        type: string
        description: Retrieve assets from a draft release from this repo (e.g. NVIDIA/cudaqx)
        required: false
      assets_tag:
        type: string
        description: Retrieve assets from a draft release with this tag (e.g. installed_files-1)
        required: false

jobs:
  pr-build:
    name: Build and test
    strategy:
      fail-fast: false
      matrix:
        runner: [
          { arch: arm64, gpu: a100 },
          { arch: amd64, gpu: v100 },
        ]
    runs-on: linux-${{ matrix.runner.arch }}-gpu-${{ matrix.runner.gpu }}-latest-1
    container: 
      image: ${{ format('ghcr.io/nvidia/cudaqx-dev:{0}-{1}', inputs.release-number, matrix.runner.arch) }}
      env:
        NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }}
    permissions: write-all
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: releases/v${{ inputs.release-number }}
          set-safe-directory: true

      - name: Set git safe directory
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Set release number
        id: set-release-number
        run: |
          echo "CUDAQX_QEC_VERSION=${{ inputs.release-number }}" >> $GITHUB_ENV
          echo "CUDAQX_SOLVERS_VERSION=${{ inputs.release-number }}" >> $GITHUB_ENV
          # And output to the GitHub Actions summary.
          echo "Setting CUDAQX_QEC_VERSION=${{ inputs.release-number }}" >> $GITHUB_STEP_SUMMARY
          echo "Setting CUDAQX_SOLVERS_VERSION=${{ inputs.release-number }}" >> $GITHUB_STEP_SUMMARY

      - name: Install dependencies
        run: |
          apt update && apt install -y --no-install-recommends zip unzip patchelf

      - name: Fetch assets and set QEC_EXTERNAL_DECODERS
        env:
          GH_TOKEN: ${{ github.token }}
        id: fetch-assets
        run: |
          if [[ -n "${{ inputs.assets_repo }}" ]] && [[ -n "${{ inputs.assets_tag }}" ]]; then
            bash .github/workflows/scripts/install_git_cli.sh
            # Fetch the assets into this directory
            gh release download -R ${{ inputs.assets_repo }} ${{ inputs.assets_tag }}
            # Show what was downloaded
            ls
            # Show release info (and save to summary)
            gh release view -R ${{ inputs.assets_repo }} ${{ inputs.assets_tag }} >> $GITHUB_STEP_SUMMARY
            # Extract the decoder that needs to be embedded in the release
            mkdir -p tmp
            unzip -d tmp installed_files-${{ matrix.runner.arch }}.zip
            echo "QEC_EXTERNAL_DECODERS=$(pwd)/tmp/lib/decoder-plugins/libcudaq-qec-nv-qldpc-decoder.so" >> $GITHUB_ENV
          fi
        shell: bash
          
      # ========================================================================
      # Build
      # ========================================================================

      - name: Build
        id: build
        uses: ./.github/actions/build-lib
        with:
          lib: "all"
          platform: ${{ matrix.runner.arch }}
          install-prefix: /usr/local/cudaq

      - name: Save build artifacts
        run: |
          cmake --build ${{ steps.build.outputs.build-dir }} --target zip_installed_files
          cd ${{ steps.build.outputs.build-dir }}
          mv installed_files.zip installed_files-${{ matrix.runner.arch }}.zip
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: installed_files-${{ matrix.runner.arch }}
          path: ${{ steps.build.outputs.build-dir }}/installed_files-${{ matrix.runner.arch }}.zip

      # ========================================================================
      # Run tests
      # ========================================================================
      #
      - name: Run tests
        run: cmake --build ${{ steps.build.outputs.build-dir }} --target run_tests

      # ========================================================================
      # Run python tests
      # ========================================================================
 
      - name: Install python requirements
        run: pip install numpy pytest cupy-cuda12x cuquantum-python-cu12

      - name: Run Python tests
        run: |
          if [[ -n "${{ env.QEC_EXTERNAL_DECODERS }}" ]]; then
            # Verify that external decoder is available if applicable
            export PYTHONPATH="/usr/local/cudaq:$HOME/.cudaqx"
            python3 -c "import cudaq_qec as qec; print(qec.__version__); d = qec.get_decoder('nv-qldpc-decoder', qec.get_code('steane').get_parity()); print(d.get_version())"
          fi
          cmake --build ${{ steps.build.outputs.build-dir }} --target run_python_tests
        shell: bash

      # ========================================================================
      # Run example tests
      # ========================================================================
 
      - name: Run example tests
        run: |
          ln -s /usr/local/cudaq /cudaq-install
          bash scripts/ci/test_examples.sh all 

